{"version":3,"sources":["components/ProductButton.js","components/ContextAPI.js","components/AddProduct.js","components/EditRoom.js","components/Addroom.js","components/MainPage.js","components/RoomButtons.js","App.js","reportWebVitals.js","index.js"],"names":["ProductButton","props","product","context","React","createContext","Provider","Consumer","AddProduct","useState","selectedProduct","setselectedProduct","buttonColor","val","onChange","element","target","value","products","map","onClick","addProducts","name","roomType","EditRoom","showAddProduct","setshowAddProduct","productTypes","productsList","setbuttonColor","type","hidden","alreadyInRoom","i","roomName","condition","style","backgroundColor","productName","to","Addroom","rooms","setroomType","setroomName","roomColor","setroomColor","placeholder","length","alert","addRoom","MainPage","RoomButtons","App","newRoom","setnewRoom","roomButtonName","setroomButtonName","roomButtonType","setroomButtonType","productInRoom","setproductInRoom","limitProductsInRoom","counter","limitStereo","theRoom","className","path","color","setTheRoom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50f68e8d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function ProductButton(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <h4>{props.product}</h4>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nconst context = React.createContext();\r\nexport const Provider = context.Provider;\r\nexport const Consumer = context.Consumer;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Consumer } from './ContextAPI'\r\n\r\n\r\nexport default function AddProduct(props) {\r\n\r\n    const [selectedProduct, setselectedProduct] = useState(props.product[0]); //default the first choice\r\n\r\n    const [buttonColor, setbuttonColor] = useState('red');\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Consumer>\r\n                {(val) => {\r\n                    return (\r\n                        <div>\r\n                            {/* maps the product types dropdown */}\r\n                            <label>Choose a product : </label>\r\n                            <select onChange={(element) => { (setselectedProduct(element.target.value)) }}>\r\n                                {val.products.map((element) => {\r\n                                    \r\n                                    return (\r\n                                        <option>{element}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n\r\n                            <div>\r\n                                {/* sets the current choice of product and sends it to app component */}\r\n                                <button onClick={() => { val.addProducts(selectedProduct, buttonColor,val.name,val.roomType) ;}}>Add this product</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ProductButton from './ProductButton.js';\r\nimport AddProduct from './AddProduct.js';\r\n\r\n\r\nexport default function EditRoom(props) {\r\n\r\n    const [showAddProduct, setshowAddProduct] = useState(false);\r\n\r\n    const [productsList, setproductsList] = useState(props.productTypes);\r\n\r\n    const [buttonColor, setbuttonColor] = useState(false);\r\n\r\n    const hidden = () => { //shows and hides the dropdown of product adding\r\n        if (showAddProduct == true) {\r\n            return (\r\n                <AddProduct product={productsList} />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Type:{props.type}</h3>\r\n            <h3>Name:{props.name}</h3>\r\n            {hidden()}\r\n\r\n            {/* the map of existing product */}\r\n            {props.alreadyInRoom.map((element, i) => {\r\n                // compares between the room names for showing the product in the right room\r\n                if (element.roomName == props.name) {\r\n                    return (\r\n                        <button onClick={() => { //define if the product is on or off by colors\r\n                            setbuttonColor(!buttonColor);\r\n                            if (buttonColor == true) {\r\n                                element.condition = 'green'\r\n                            }\r\n                            else {\r\n                                element.condition = 'red'\r\n                            }\r\n                        }} style={{ backgroundColor: `${element.condition}` }}>\r\n                            {/* present the product name on the button */}\r\n                            <ProductButton product={element.productName} /> \r\n                        </button>\r\n                    )\r\n                }\r\n            })}\r\n            <br />\r\n            <button onClick={() => { setshowAddProduct(!showAddProduct) }}>Add a product</button>\r\n\r\n\r\n            <br />\r\n\r\n            <Link to='/'>  <button>Back to main page</button> </Link>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { Link } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\n\r\nexport default function Addroom(props) {\r\n\r\n    const [roomType, setroomType] = useState(props.rooms[0]);//default the first choice\r\n\r\n    const [roomName, setroomName] = useState('');\r\n\r\n    const [roomColor, setroomColor] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            {/* maps the room types dropdown */}\r\n            <label>Choose a room: </label> \r\n            <select onChange={(element) => { setroomType(element.target.value) }}>\r\n                {props.rooms.map((element) => {\r\n                    return (\r\n                        <option>{element}</option>\r\n                    )\r\n                })}\r\n            </select>\r\n            <p>Name: \r\n                 <input onChange={(element) => { setroomName(element.target.value)}} type='text' placeholder='Name your room' />\r\n            </p>\r\n            <p>Pick a color for your room: \r\n                <input onChange={(element) => { setroomColor(element.target.value) }} type='color' placeholder='Color your room' />\r\n            </p>\r\n\r\n            <Link to='/'><button  onClick={()=>{\r\n                if(roomName.length>5){\r\n                    alert('Name have to be maximum 5 letters')\r\n                }\r\n                else if(roomColor==''){\r\n                    alert('Pick a color for your room')\r\n                } else{\r\n                     {props.addRoom(roomType,roomName,roomColor)} //sends all the chosen data back to app component\r\n                }\r\n            }}>ADD</button></Link>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function MainPage() {\r\n    return (\r\n        <div>\r\n           <Link to=\"/addRoom\">addRoom</Link>\r\n        </div>\r\n    )\r\n}","import React,{useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function RoomButtons(props) {\r\n\r\n    const [room, setroom] = useState(props)\r\n\r\n     \r\n    return (\r\n    // lead us to \"editroom\" component\r\n     <Link to='/room'> \r\n            <p>{props.type}</p>\r\n            <p>{props.name}</p>   \r\n        </Link> \r\n    )\r\n}","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport EditRoom from './components/EditRoom';\nimport Addroom from './components/Addroom';\nimport MainPage from './components/MainPage';\nimport RoomButtons from './components/RoomButtons';\nimport './App.css'\nimport { Provider } from './components/ContextAPI'\n\n\nexport default function App() {\n\n  const roomsTypes = ['Bedroom', 'Living room', 'Bathroom', 'Kitchen']; \n\n  const productTypes = ['Air conditioner', 'Stereo Station', 'Lamp', 'Boiler'];\n\n  const [newRoom, setnewRoom] = useState([]); //this hook gets every new room we add .\n  const [roomButtonName, setroomButtonName] = useState([]);\n  const [roomButtonType, setroomButtonType] = useState([]);\n  //gets the product by name ,condition if green or red, room name and room type. \n  const [productInRoom, setproductInRoom] = useState([]);\n\n\n\n  const addRoom = (type, name, color) => {\n    setnewRoom([...newRoom, { roomType: type, roomName: name, roomColor: color }]);\n  }\n\n  //limit what can be in room\n  const controlProductsInRoom = (productName, condition, roomName, roomType) => {\n    if (limitProductsInRoom(roomName)) {\n      alert('Max 5 products in room')\n    }\n    if (limitStereo(roomName, productName)) {\n      alert('No more stereo')\n    }\n    if (productName == 'Boiler' && roomType != 'Bathroom') {\n      alert('Boiler can be only in Bathroom')\n    }\n    if (limitProductsInRoom(roomName) == false && limitStereo(roomName, productName) == false && (productName == 'Boiler' && roomType != 'Bathroom') == false) {\n      setproductInRoom([...productInRoom, { productName, condition, roomName, roomType }]);\n    }\n  }\n\n  const limitProductsInRoom = (roomName) => {\n    let counter = 0;\n    for (let i = 0; i < productInRoom.length; i++) {\n      if (productInRoom[i].roomName == roomName) {\n        counter++\n      }\n      if (counter == 5) {\n        return true\n      }\n    }\n    return false\n  }\n\n  const limitStereo = (roomName, product) => {\n    let counter = 0;\n    for (let i = 0; i < productInRoom.length; i++) {\n      if (productInRoom[i].roomName == roomName && productInRoom[i].productName == 'Stereo Station' && product == 'Stereo Station') {\n        counter++\n      }\n      if (counter == 1) {\n        return true\n      }\n    }\n    return false\n  }\n\n//sets the name and the type of the room button in mainscreen\n  const theRoom = (element) => {\n    setroomButtonName(element.roomName);\n    setroomButtonType(element.roomType);\n  }\n\n  return (<div className=\"App\">\n    <h1>Smart House</h1>\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/addRoom\">\n            <Addroom rooms={roomsTypes} addRoom={addRoom} />\n          </Route>\n          <Route path=\"/room\">\n            <Provider value={{ name: roomButtonName, products: productTypes, addProducts: controlProductsInRoom, roomType: roomButtonType }}>\n              <EditRoom name={roomButtonName} type={roomButtonType} alreadyInRoom={productInRoom} productTypes={productTypes} />\n            </Provider>\n          </Route>\n          <Route path='/'>\n            {/* present us the room button */}\n            {newRoom.map((element, i) => { \n              return (\n                <button onClick={() => { theRoom(element) }} style={{ backgroundColor: `${element.roomColor}` }}>\n                  <RoomButtons setTheRoom={theRoom} name={element.roomName} type={element.roomType} color={element.roomColor} />\n                </button>)\n            })}\n            <MainPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}